//
//  RatingControl.swift
//  FoodTracker
//
//  Created by Fibiolla Plaath on 31/03/2021.
//

import UIKit

///@IBDesignable Provides functionality for live rendering of changes of custom views directly in a storyboard.
@IBDesignable class RatingControl: UIStackView {
    
    //MARK: Properties
    
    /// Contains a list of buttons.
    private var ratingButtons = [UIButton] ()
    
    
    /// Controls the control's rating. Rating property
    var rating = 0 {
        
        //PROPERTY OBSERVER: Observes and responds to changes
        didSet {
            
            //Whenever ratings changes
            updateButtonSelectionStates()
        }
    }
    
   
    ///@IBInspectable allows us to create attributes in code that we assign in a storyboard.
    //Define size of buttons & # of buttons in my control.
    @IBInspectable var starSize: CGSize = CGSize(width: 44.0, height: 44.0) {
        
        didSet {
            
            //Adds new buttons using updated size & count
            setupButtons()
        }
        
    }
    
    @IBInspectable var starCount: Int = 5 {
        
        didSet {
            
            //Adds new buttons using updated size & count
            setupButtons()
        }
    }
    
    //MARK: Initialization
    
    /// Calls superclass's initializer
    /// - Parameter frame: This method uses frame rectangle to set center and bounds properties accordingly.
    override init(frame: CGRect) {
        
        super.init(frame: frame)
        setupButtons()
    }
    
    /// Calls superclass's initializer
    /// - Parameter coder: returns object initialized from data in given unarchiver
        required init(coder: NSCoder) {
            
            super.init(coder: coder)
            setupButtons()
        }
    
    //MARK: Button Action
    
    @objc func ratingButtonTapped(button: UIButton) {
        
        guard let index = ratingButtons.firstIndex(of: button) else {
            
            fatalError("The button, \(button), is not in the ratingButtons array: \(ratingButtons)")
        }
        
        //Calculates the rating of selected button
        let selectedRating = index + 1
        
        if selectedRating == rating {
            
            //If selected star represents current rating, reset rating to 0
            rating = 0
        } else {
            
            //Otherwise set rating to selected star
            rating = selectedRating
        }
        
    }
    
    //MARK: Private Methods
    
    /// Setting up of rating buttons: Loading button images, creating 5 buttons, button actions, updating button states
    private func setupButtons() {
        
        //Clear out existing buttons
        for button in ratingButtons {
            
            removeArrangedSubview(button)
            button.removeFromSuperview()
        }
        
        ratingButtons.removeAll()
        
        //Load star images from assets catalog.
        let bundle = Bundle(for: type(of: self))
        let filledStar = UIImage(named: "filledStar", in: bundle, compatibleWith: self.traitCollection)
        let emptyStar = UIImage(named: "emptyStar", in: bundle, compatibleWith: self.traitCollection)
        let highlightedStar = UIImage(named: "highlightedStar", in: bundle, compatibleWith: self.traitCollection)
        
        //for-in loop iterates over a sequence
        for index in 0..<starCount {
            
            //Create button
            let button = UIButton()
            
            //Set button images. Modifying button appearances based on state
            button.setImage(emptyStar, for: .normal) //Empty star for normal state. Default
            button.setImage(filledStar, for: .selected) //Selected state
            button.setImage(highlightedStar, for: .highlighted)
            button.setImage(highlightedStar, for: [.highlighted, .selected])
            
            //ADDS CONSTRAINTS
            button.translatesAutoresizingMaskIntoConstraints = false //Removes button's autogenerated constraints
            
            //Defines button's height & width as fixed size
            //isActive property activates the constraint
            button.heightAnchor.constraint(equalToConstant: starSize.height).isActive = true
            button.widthAnchor.constraint(equalToConstant: starSize.width).isActive = true
            
            //Sets accessibility label
            button.accessibilityLabel = "Set \(index + 1) star rating"
            
            //Setup button action
            button.addTarget(self, action: #selector(RatingControl.ratingButtonTapped(button:)), for: .touchUpInside)
            
            //Adds button to stack
            addArrangedSubview(button)
            
            //New button added to rating button array
            ratingButtons.append(button)
        }
        
        updateButtonSelectionStates()
    }
    
    //Update button's appearance
    private func updateButtonSelectionStates() {
        
        for (index, button) in ratingButtons.enumerated() {
            
            //If index of button is < than rating, that button should be selected
            button.isSelected = index < rating
            
            //Sets hint string for currently selected star
            let hintString: String?
            if rating == index + 1 {
                
                hintString = "Tap to reset the rating to zero."
            } else {
                
                hintString = nil
            }
            
            //Calculates value string
            let valueString: String
            
            switch (rating) {
            
            case 0:
                valueString = "No rating set."
            case 1:
                valueString = "1 star set."
            default:
                valueString = "\(rating) stars set."
            }
            
            //Assigns hintString & valueString
            button.accessibilityHint = hintString
            button.accessibilityValue = valueString
        }
    }
}
